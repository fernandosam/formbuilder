$(document).ready(function() {
	/**
	 * Initial data
	 *
	 * Fill in the JSON data that should be populated into the form.  This can be any JSON data that you'd like
	 * provided that it fits the schema and options (if you provide those).
	 *
	 */
	{{#if data}}
		var data = {{{data}}};	
	{{else}}
		var data = {};
	{{/if}}

	/**
	 * JSON-schema for the form
	 *
	 * The form schema defines the data types, validation logic and other constraints that need to be satisfied in
	 * order for the form to be considered valid.
	 *
	 * This should follow the JSON-schema convention.
	 * @see http://json-schema.org
	 *
	 * Full schema settings are listed here:
	 * @see http://www.alpacajs.org
	 *
	 */
	{{#if schema}}
		var schema = {{{schema}}};	
	{{else}}
		var schema = {};
	{{/if}}

	/**
	 * Layout options for the form
	 *
	 * These options describe UI configuration for the controls that are rendered for the data and schema.  You can
	 * tweak the layout and presentation aspects of the form in this section.
	 *
	 * Full options settings are listed here:
	 * @see http://www.alpacajs.org
	 *
	 */
	{{#if options}}
		var options = {{{options}}};

		if (!document.getElementsByTagName('meta').description) {
			options.form = {
				"buttons": {
					"submit": {}
				},
				"toggleSubmitValidState": false
			};
		} else {
			options.form = {		
				"attributes": {
					"cam-form": ""
				}
			};
		}
		
	{{else}}
		var options = {};
	{{/if}}
		
	/**
	 * This is an optional post render callback that Alpaca will call once the form finishes rendering.  The form
	 * rendering itself is asynchronous as it may load templates or other resources for use in generating the UI.
	 *
	 * Once the render is completed, this callback is fired and the top-level Alpaca control is handed back.
	 *
	 * @param control
	 */	
	var postRenderCallback = function(control) {
		// Custom Programming
		{{{scripts}}}
		
		validateForm(control);
			
		$('body').on('keyup click change',':input',function(){
			updateCamunda(control.getValue());
		});
		
		$('body').on('change',':input',function(){
			validateForm(control, true);
		});	
	};

	// Call functions to init Alpaca integration with Camunda
	var editForm = function(data) {
		var view = {
			"parent": "bootstrap-create",
			"locale": "pt_BR"
		};

		if (!jQuery.isEmptyObject(data)) {
			view.parent = "bootstrap-edit";
		}

		return view;
	};

	var view = editForm(data);

	var validateForm = function(control, refresh) {
		control.refreshValidationState(refresh);
		
		if (control.form && control.form.isFormValid()) {
			$('button[ng-click="complete()"]').removeAttr("disabled");
			$('button[ng-click="startProcessInstance()"]').removeAttr("disabled");
		} else {
			$('button[ng-click="complete()"]').attr("disabled", "true");
			$('button[ng-click="startProcessInstance()"]').attr("disabled", "true");
		}
	};

	var updateCamunda = function(object) {
		if (object) {
			$('#json_value').attr("value", JSON.stringify(object));
		}
	};

	/**
	 * Render the form.
	 *
	 * We call alpaca() with the data, schema and options to tell Alpaca to render into the selected dom element(s).
	 *
	 */ 
	$("#form_{{{formid}}}").alpaca({
		"dataSource": data,
		"optionsSource": options,
		"schemaSource": schema,
		"viewSource": view,
		"postRender": postRenderCallback
	});
	
	
	/**
	 * Variables Manager
	 */
	if (typeof(camForm) != "undefined") {
		var variableManager = camForm.variableManager;

		var el = document.createElement("input");
		el.setAttribute("id", "json_value");
		el.setAttribute("type", "hidden");
		el.setAttribute("value", "");
		$("#form_{{{formid}}}").prepend(el);

		camForm.on('form-loaded', function() {
			variableManager.createVariable({
				name: schema.title,
				type: 'json'
			});
			//console.log(variableManager.variables);
		});

		camForm.on('submit', function(evt) {
			var fieldValue = $('#json_value').val();
			
			if (fieldValue){
				variableManager.variableValue(schema.title, JSON.parse(fieldValue));
				//console.log(variableManager.variables);
			}
		});
	}
});