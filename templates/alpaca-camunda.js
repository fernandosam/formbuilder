(function() {
  var template = Handlebars.template, templates = Handlebars.templates = Handlebars.templates || {};
templates['alpaca-camunda.hbs'] = template({"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
    return " /**\r\n * Functions to integrate Camunda with AlpacaJS\r\n */\r\n \r\nvar validateForm = function(control,refresh) {\r\n	control.refreshValidationState(refresh);\r\n	\r\n	if (control.form.isFormValid()) {\r\n		$('button[ng-click=\"complete()\"]').removeAttr(\"disabled\");\r\n	} else {\r\n		$('button[ng-click=\"complete()\"]').attr(\"disabled\", \"true\");\r\n	}\r\n};\r\n\r\nvar upFirstLetter = function(string) {\r\n	return string.charAt(0).toUpperCase() + string.slice(1);\r\n};\r\n\r\nvar dataType = function(schema, nameInput) {\r\n	var prop = schema.properties[nameInput];\r\n\r\n	if (prop) {\r\n		if (prop.type == \"array\") prop.type = \"string\";\r\n		prop = upFirstLetter(prop.type);\r\n	} else {\r\n		prop = \"String\";\r\n	}\r\n\r\n	return prop;\r\n};\r\n\r\nvar updateCamunda = function(schema, formValue) {\r\n    var toArray = [];\r\n    $(\":input[name-cam]\").remove();\r\n    recursiveIteration(schema, formValue, toArray);\r\n};\r\n\r\nvar recursiveIteration = function(schema, object, toArray) {\r\n    for (var property in object) {\r\n        if (object.hasOwnProperty(property)) {\r\n            if (typeof object[property] == \"object\") {\r\n                recursiveIteration(schema, object[property], toArray);\r\n            } else {\r\n                //found a property which is not an object, check for your conditions here\r\n                var key = property;\r\n                var value = object[property];\r\n                var dType = dataType(schema, key);\r\n\r\n                if (toArray[key]) {\r\n                    toArray[key] = toArray[key] + 1;\r\n                } else {\r\n                    toArray[key] = 1;\r\n                }\r\n\r\n                if (toArray[key] > 1) {\r\n                    key = property + \"_\" + toArray[key];\r\n                }\r\n\r\n                if (key !== \"\" && value !== \"\") {\r\n                    var hiddenInput = $(\":input[cam-variable-name=\" + key + \"]\");\r\n                    var hiddenInputVal = hiddenInput.val();\r\n\r\n                    if (hiddenInputVal === undefined) {\r\n                        var elNew = document.createElement(\"input\");\r\n                        elNew.setAttribute(\"name\", key);\r\n                        elNew.setAttribute(\"type\", \"hidden\");\r\n                        elNew.setAttribute(\"cam-variable-name\", key);\r\n                        elNew.setAttribute(\"cam-variable-type\", dType);\r\n                        elNew.setAttribute(\"class\", \"form-control\");\r\n                        elNew.setAttribute(\"value\", value);\r\n						\r\n						var dv = document.createElement('div');\r\n						dv.setAttribute(\"class\", \"form-group\");\r\n						dv.setAttribute(\"name-cam\", key);\r\n						dv.appendChild(elNew);\r\n                        \r\n						//$(elNew).wrap(\"<div class='form-group'>\");\r\n						\r\n						$('form').prepend(dv);\r\n						\r\n                    } else {\r\n                        hiddenInput.attr(\"value\", value)\r\n                    }\r\n                }\r\n                //console.log(\"found prop: \" + object[property]);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nvar editForm = function(data) {\r\n	var view = {\r\n		\"parent\": \"bootstrap-create\",\r\n		\"locale\": \"pt_BR\"\r\n	};\r\n\r\n	if (!jQuery.isEmptyObject(data)) {\r\n		view.parent = \"bootstrap-edit\";\r\n		$('button[ng-click=\"complete()\"]').removeAttr(\"disabled\");\r\n	}\r\n\r\n	return view;\r\n};";
},"useData":true});
})();